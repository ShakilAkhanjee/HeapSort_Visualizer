#include <iostream>
#include <vector>
#include <iomanip>
#include <chrono>
#include <thread>
#include <algorithm>
#include <cmath>
using namespace std;

int comparisons = 0, swaps = 0;
int delay = 1000;

#ifdef _WIN32
    #define CLEAR "cls"
#else
    #define CLEAR "clear"
#endif

// Print the heap tree
void printHeapTree(const vector<int>& arr, int n) {
    cout << "\nVisual Heap Tree:\n\n";

    int level = 0;
    int index = 0;
    int maxLevel = log2(n) + 1;

    while (index < n) {
        int nodesInLevel = 1 << level; // 2^level
        int spacesBefore = (1 << (maxLevel - level)) - 1;
        int spacesBetween = (1 << (maxLevel - level + 1)) - 1;

        // Print leading spaces
        for (int i = 0; i < spacesBefore; i++) cout << "   ";

        // Print nodes in current level
        for (int i = 0; i < nodesInLevel && index < n; i++, index++) {
            cout << setw(2) << arr[index];
            for (int j = 0; j < spacesBetween; j++) cout << "   ";
        }
        cout << "\n\n";
        level++;
    }
}

// Heapify function (Min Heap)
void heapify(vector<int>& arr, int n, int i) {
    int smallest = i;
    int left = 2*i + 1;
    int right = 2*i + 2;

    if (left < n) {
        comparisons++;
        if (arr[left] < arr[smallest])
            smallest = left;
    }

    if (right < n) {
        comparisons++;
        if (arr[right] < arr[smallest])
            smallest = right;
    }

    if (smallest != i) {
        swaps++;
        swap(arr[i], arr[smallest]);

        system(CLEAR);
        cout << "Heapify at index " << i << ":\n";
        for (int k : arr) cout << k << " ";
        cout << "\n";
        printHeapTree(arr, n);
        cout << "Comparisons: " << comparisons << ", Swaps: " << swaps << "\n";
        this_thread::sleep_for(chrono::milliseconds(delay));

        heapify(arr, n, smallest);
    }
}

// Build the heap (Min Heap)
void buildMinHeap(vector<int>& arr, int n) {
    for (int i = n / 2 - 1; i >= 0; i--) {
        heapify(arr, n, i);
    }
}

// Heap Sort using Min Heap
void heapSort(vector<int>& arr) {
    int n = arr.size();
    buildMinHeap(arr, n);

    for (int i = n - 1; i > 0; i--) {
        swaps++;
        swap(arr[0], arr[i]);

        system(CLEAR);
        cout << "Extracting min element, swapping index 0 with index " << i << ":\n";
        for (int k : arr) cout << k << " ";
        cout << "\n";
        printHeapTree(arr, i); // Show heap till unsorted portion
        cout << "Comparisons: " << comparisons << ", Swaps: " << swaps << "\n";
        this_thread::sleep_for(chrono::milliseconds(delay));

        heapify(arr, i, 0);
    }
}

int main() {
    int n;
    cout << "Enter number of elements: ";
    cin >> n;

    vector<int> arr(n);
    cout << "Enter " << n << " elements:\n";
    for (int i = 0; i < n; i++) cin >> arr[i];

    cout << "Enter delay between steps (in milliseconds): ";
    cin >> delay;

    system(CLEAR);
    cout << "Original array:\n";
    for (int i : arr) cout << i << " ";
    cout << "\n";
    this_thread::sleep_for(chrono::milliseconds(delay));

    heapSort(arr);

    // Final result
    system(CLEAR);
    cout << "Sorted Array (Min to Max using Heap Sort):\n";
    for (int x : arr) cout << x << " ";
    cout << "\n\nTotal Comparisons: " << comparisons;
    cout << "\nTotal Swaps: " << swaps << "\n";

    return 0;
}
